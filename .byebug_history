skip
Song.joins(:tags)
    .group('songs.id')
    .select('songs.*, COUNT(tags.id) as tag_count')
    .having('COUNT(tags.id) = ?', selected_tag_ids.size)
    .where(tags: { id: selected_tag_ids })
    .where('songs.id NOT IN (?)', Song.joins(:tags).where.not(tags: { id: selected_tag_ids }).select(:id))
Song.joins(:tags)
    .select('songs.*, COUNT(tags.id) as tag_count')
    .group('songs.id')
    .having('COUNT(tags.id) = ?', selected_tag_ids.size)
    .where(tags: { id: selected_tag_ids })
    .having("tag_count = ?", selected_tag_ids.size)
Song.joins(:tags)
    .group('songs.id')
    .select('songs.*, COUNT(tags.id) as tag_count')
    .having('COUNT(tags.id) = ?', selected_tag_ids.size)
    .where(tags: { id: selected_tag_ids })
Song.joins(:tags)
    .group('songs.id')
    .select('songs.*, COUNT(tags.id) as tag_count')
    .having('COUNT(tags.id) = ?', selected_tag_ids.size)
Song.joins(:tags)
    .group('songs.id')
    .select('songs.*, COUNT(tags.id) as tag_count')
    .having('COUNT(tags.id) = ?', selected_tag_ids.size)
    .where(tags: { id: selected_tag_ids })
Song.find_by_sql([
  %q{
    SELECT songs.*
    FROM songs
    WHERE
    (SELECT COUNT(*)
     FROM songtags
     WHERE songtags.song_id = songs.id
     AND songtags.tag_id IN (?)) = ?
  }, selected_tag_ids, selected_tag_ids.size])
selected_tag_ids.size == Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id").having("COUNT(DISTINCT tags.id) = ?", selected_tag_ids.size).having("COUNT(DISTINCT songs_tags.tag_id) = ?", selected_tag_ids.size)
Song.joins(:tags)
    .where(tags: { id: selected_tag_ids })
    .group("songs.id").having("COUNT(DISTINCT songs_tags.tag_id) = ?", selected_tag_ids.size)
skip
Song.joins(:tags)
    .where(tags: { id: selected_tag_ids })
    .group("songs.id")
    .having("COUNT(DISTINCT tags.id) = ?", selected_tag_ids.size)
    .having("COUNT(DISTINCT songs_tags.tag_id) = ?", selected_tag_ids.size)
Song.joins(:tags)
    .where(tags: { id: selected_tag_ids })
    .group("songs.id")
    .having("COUNT(DISTINCT tags.id) = ?", selected_tag_ids.size)
songs = Song.joins(:tags)
             .where(tags: { id: selected_tag_ids })
             .group("songs.id")
             .having("COUNT(DISTINCT tags.id) = ?", selected_tag_ids.size)
             .select("songs.id")
songs = Song.joins(:tags).distinct
             .where(tags: { id: selected_tag_ids })
             .group("songs.id")
             .having("COUNT(DISTINCT tags.id) = ?", selected_tag_ids.size)
songs = Song.joins(:tags)
             .where(tags: { id: selected_tag_ids })
             .group("songs.id")
             .having("COUNT(DISTINCT tags.id) = ?", selected_tag_ids.size)
Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id").having("COUNT(*) = ?", selected_tag_ids.size)
Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id")
selected_tag_ids.size
selected_tag_ids.size)
Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id").having("COUNT(*) = ?", selected_tag_ids.size)
Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id").having("COUNT(*) = ?", selected_tag_ids.size).pluck(:id).size
skip
Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id").having("COUNT(*) = ?", selected_tag_ids.size).distinct
Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id").having("COUNT(*) = ?", selected_tag_ids.size)
Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id")
selected_tag_ids
Song.joins(:tags).where(tags: { id: selected_tag_ids })
skip
@song
selected_tag_ids.size == @song = Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id").having("COUNT(*) = ?", selected_tag_ids.size).order("RANDOM()").first
skip
selected_tag_ids
Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id").having("COUNT(*) = ?", selected_tag_ids.size).order(Arel.sql("COUNT(DISTINCT tags.id) ASC")).first
@song
skip
selected_tag_ids.size == Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id").having("COUNT(DISTINCT tags.id) = ?", selected_tag_ids.size), selected_tag_ids.size).order(Arel.sql("COUNT(*) ASC")).first
selected_tag_ids.size == Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id")..having("COUNT(DISTINCT tags.id) = ?", selected_tag_ids.size), selected_tag_ids.size).order(Arel.sql("COUNT(*) ASC")).first
skip
Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id").having("COUNT(*) = ?", selected_tag_ids.size)
a
aSong.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id").having("COUNT(*) = ?", selected_tag_ids.size)
a
Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id").having("COUNT(*) = ?", selected_tag_ids.size)
Song.joins(:tags).where(tags: { id: selected_tag_ids })
Song.joins(:tags)
 selected_tag_ids.size == Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id").having("COUNT(*) = ?", selected_tag_ids.size).order(Arel.sql("COUNT(*) ASC"))
selected_tag_ids.size == Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id").having("COUNT(*) = ?", selected_tag_ids.size).order(Arel.sql("COUNT(*) ASC")).first
skip
selected_tag_ids.size == Song.joins(:song_tags).where(song_tags: { tag_id: selected_tag_ids }).group("songs.id").count.values.first
    elsif selected_tag_ids.size == Song.joins(:song_tags).where(song_tags: { tag_id: selected_tag_ids }).group("songs.id").count.values.first
selected_tag_ids
skip
selected_tag_ids
Song.joins(:song_tags).where(song_tags: { tag_id: selected_tag_ids }).distinct.count
selected_tag_ids.size
skip
selected_tag_ids
skip
sきp
selected_tag_ids
skip
selected_tag_ids
skip
selected_tag_ids
sselected_tag_ids
skip
selected_tag_ids
skip
selected_tag_ids
skip
selected_tag_ids.size.downto(1)
selected_tag_ids.size
selected_tag_ids.size.downto(1) do |i|
@song = Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id").having("COUNT(*) = ?", selected_tag_ids.size).order("RANDOM()").first
Song.joins(:tags).where(tags: { id: selected_tag_ids })
params[:tag_ids]
tags
@song
skip
@song
skip
@song
@SONG
 end
=> 18:     @song
skip
    if selected_tag_ids.empty? || selected_tag_ids.size == Tag.count
=>  5:     if selected_tag_ids.empty? || selected_tag_ids.size == Tag.count
skip
Song.order("RANDOM()").first
@song
 selected_tag_ids
if selected_tag_ids.empty? || selected_tag_ids.size == Tag.count
@song
selected_tag_ids
    if selected_tag_ids.empty? || selected_tag_ids.size == Tag.count
    selected_tag_ids = params[:tag_ids].present? ? params[:tag_ids].map(&:to_i) : []
params[:tag_ids]
skip
@song
skip
 @song
skip
=> 26:       redirect_to aidoji_tasks_path(@task), success: "nice task update"
 @task.save
skip
ski@
skip
@task = current_user.tasks.find(params[:id])
current_user.tasks.find(params[:id])
tasks.find(params[:id])
find(params[:id])
@task
skip
@theme_color
skip
if theme
skip
ski@
theme = ThemeChecker.check_theme(params[:theme])
    byebug
if theme
check_theme
ALLOWED_WORDS.include?(theme)
ThemeChecker.check_theme(params[:theme])
params[:theme]
theme
