skip
most_tags_match = Song.joins(:song_tags)
                              .where(song_tags: { tag_id: selected_tag_ids })
                              .group('songs.id')
most_tags_match = Song.joins(:song_tags)
                              .where(song_tags: { tag_id: selected_tag_ids })
                              .group('songs.id')
                              .having('COUNT(songs.id) >= ?', selected_tag_ids.size)
                              .order('COUNT(songs.id) DESC, RANDOM()')
most_tags_match = Song.joins(:song_tags)
                              .where(song_tags: { tag_id: selected_tag_ids })
                              .group('songs.id')
                              .having('COUNT(songs.id) >= ?', selected_tag_ids.size)
                              .order('COUNT(songs.id) DESC, RANDOM()'
most_tags_match = Song.joins(:song_tags)
                              .where(song_tags: { tag_id: selected_tag_ids })
                              .group('songs.id')
                              .having('COUNT(songs.id) >= ?', selected_tag_ids.size)
                              .order('COUNT(songs.id) DESC, RANDOM()')v
skip
 @song = Song.joins(:tags).group('songs.id').select('songs.*, COUNT(tags.id) as tag_count').having('COUNT(tags.id) = ?', selected_tag_ids.size).where(tags: { id: selected_tag_ids }).where('songs.id NOT IN (?)', Song.joins(:tags).where.not(tags: { id: selected_tag_ids }).select(:id)).first
skip
@song = Song.joins(:tags)
                    .where(tags: { id: selected_tag_ids })
                    .group("songs.id")
                    .having("COUNT(*) = ?", selected_tag_ids.size)
                    .order("RANDOM()")
                    .first
skip
most_tags_match = Song.joins(:song_tags)
                              .where(song_tags: { tag_id: selected_tag_ids })
                              .group('songs.id')
                              .having('COUNT(songs.id) >= ?', selected_tag_ids.size)
 most_tags_match = Song.joins(:song_tags)
                              .where(song_tags: { tag_id: selected_tag_ids })
                              .group('songs.id')
                              .having('COUNT(songs.id) >= ?', selected_tag_ids.size)
exact_match = Song.joins(:song_tags)
                   .where(song_tags: { tag_id: selected_tag_ids })
                   .group('songs.id')
                   .having('COUNT(DISTINCT song_tags.tag_id) = ?', selected_tag_ids.size)
                   .order('RANDOM()')
exact_match = Song.joins(:song_tags)
                   .where(song_tags: { tag_id: selected_tag_ids })
                   .group('songs.id')
                   .having('COUNT(DISTINCT CASE WHEN song_tags.tag_id IN (?) THEN song_tags.tag_id END) = ?', selected_tag_ids, selected_tag_ids.size)
exact_match = Song.joins(:song_tags)
                        .where(song_tags: { tag_id: selected_tag_ids })
                        .group('songs.id')
                        .having('COUNT(DISTINCT song_tags.tag_id) = ?', selected_tag_ids.size)
exact_match = Song.joins(:song_tags)
                        .where(song_tags: { tag_id: selected_tag_ids })
                        .group('songs.id')
                        .having('COUNT(songs.id) = ?', selected_tag_ids.size)
                        .order("RANDOM()")
exact_match = Song.joins(:song_tags)
                        .where(song_tags: { tag_id: selected_tag_ids })
                        .group('songs.id')
                        .having('COUNT(songs.id) = ?', selected_tag_ids.size)
exact_match = Song.joins(:song_tags)
                        .where(song_tags: { tag_id: selected_tag_ids })
                        .group('songs.id')
skip
most_tags_match = Song.joins(:song_tags)
                              .where(song_tags: { tag_id: selected_tag_ids })
                              .group('songs.id')
                              .having('COUNT(songs.id) >= ?', selected_tag_ids.size)
                              .order('COUNT(songs.id) DESC, RANDOM()')
most_tags_match = Song.joins(:song_tags)
                              .where(song_tags: { tag_id: selected_tag_ids })
                              .group('songs.id')
                              .having('COUNT(songs.id) >= ?', selected_tag_ids.size)
exact_match.exists?
exact_match = Song.joins(:song_tags)
                        .where(song_tags: { tag_id: selected_tag_ids })
                        .group('songs.id')
                        .having('COUNT(songs.id) = ?', selected_tag_ids.size)
                        .order("RANDOM()")
exact_match = Song.joins(:song_tags)
                        .where(song_tags: { tag_id: selected_tag_ids })
                        .group('songs.id')
                        .having('COUNT(songs.id) = ?', selected_tag_ids.size)
exact_match = Song.joins(:song_tags)
                        .where(song_tags: { tag_id: selected_tag_ids })
                        .group('songs.id')
                        .having('COUNT(songs.id) = ?', selected_tag_ids.size)
                        .order("RANDOM()")
exact_match = Song.joins(:song_tags)
                        .where(song_tags: { tag_id: selected_tag_ids })
                        .group('songs.id')
skip
@song.title
@song
skip
 exact_match.exists?
@song
skip
params[:tag_titles]
tag_titles
selected_tag_ids 
skip
selected_tag_ids
skip
@song.title
skip
track = RSpotify::Track.search("'Till We Meet Again spicy aespa").first
a
track = RSpotify::Track.search("'Till We Meet Again spicy aespa").first
track = RSpotify::Track.search("'Till We Meet Again  aespa").first
track = RSpotify::Track.search("'Till We Meet Again aespa").first
"#{@song.title} aespa"
@song.title
track = RSpotify::Track.search("#{@song.title} aespa").third
track = RSpotify::Track.search("#{@song.title} aespa").second
track = RSpotify::Track.search("#{@song.title} aespa")
a
track = RSpotify::Track.search("#{@song.title} aespa")
@song.title
track = RSpotify::Track.search("#{@song.title} aespa")
track = RSpotify::Track.search("#{@song.title} aespa").second
track = RSpotify::Track.search("#{@song.title} aespa").2
track = RSpotify::Track.search("#{@song.title} aespa")
track.name
rack.name
skip
 @song = Song.joins(:tags).group('songs.id').select('songs.*, COUNT(tags.id) as tag_count').having('COUNT(tags.id) = ?', selected_tag_ids.size).where(tags: { id: selected_tag_ids }).where('songs.id NOT IN (?)', Song.joins(:tags).where.not(tags: { id: selected_tag_ids }).select(:id)).first
selected_tag_ids
skip
@song = Song.joins(:tags).group('songs.id').select('songs.*, COUNT(tags.id) as tag_count').having('COUNT(tags.id) = ?', selected_tag_ids.size).where(tags: { id: selected_tag_ids }).where('songs.id NOT IN (?)', Song.joins(:tags).where.not(tags: { id: selected_tag_ids }).select(:id)).first
selected_tag_ids.size
selected_tag_ids.size == Tag.count
selected_tag_ids = params[:tag_ids].present? ? Tag.where(title: params[:tag_ids]).pluck(:id) : []
params[:tag_ids].present? ? Tag.where(title: params[:tag_ids]).pluck(:id) : []
params[:tag_ids]
selected_tag_ids
skip
selected_tag_ids
params[:tag_ids].present? ? Tag.where(title: params[:tag_ids]).pluck(:id) : []
params[:tag_ids]
selected_tag_ids
skip
params[:tag_ids]
params[:tag_ids
selected_tag_id
skip
selected_tag_ids
selected_tag_ids.size
selected_tag_ids.size == Tag.count
skip
Song.joins(:tags)
    .group('songs.id')
    .select('songs.*, COUNT(tags.id) as tag_count')
    .having('COUNT(tags.id) = ?', selected_tag_ids.size)
    .where(tags: { id: selected_tag_ids })
    .where('songs.id NOT IN (?)', Song.joins(:tags).where.not(tags: { id: selected_tag_ids }).select(:id))
Song.joins(:tags)
    .select('songs.*, COUNT(tags.id) as tag_count')
    .group('songs.id')
    .having('COUNT(tags.id) = ?', selected_tag_ids.size)
    .where(tags: { id: selected_tag_ids })
    .having("tag_count = ?", selected_tag_ids.size)
Song.joins(:tags)
    .group('songs.id')
    .select('songs.*, COUNT(tags.id) as tag_count')
    .having('COUNT(tags.id) = ?', selected_tag_ids.size)
    .where(tags: { id: selected_tag_ids })
Song.joins(:tags)
    .group('songs.id')
    .select('songs.*, COUNT(tags.id) as tag_count')
    .having('COUNT(tags.id) = ?', selected_tag_ids.size)
Song.joins(:tags)
    .group('songs.id')
    .select('songs.*, COUNT(tags.id) as tag_count')
    .having('COUNT(tags.id) = ?', selected_tag_ids.size)
    .where(tags: { id: selected_tag_ids })
Song.find_by_sql([
  %q{
    SELECT songs.*
    FROM songs
    WHERE
    (SELECT COUNT(*)
     FROM songtags
     WHERE songtags.song_id = songs.id
     AND songtags.tag_id IN (?)) = ?
  }, selected_tag_ids, selected_tag_ids.size])
selected_tag_ids.size == Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id").having("COUNT(DISTINCT tags.id) = ?", selected_tag_ids.size).having("COUNT(DISTINCT songs_tags.tag_id) = ?", selected_tag_ids.size)
Song.joins(:tags)
    .where(tags: { id: selected_tag_ids })
    .group("songs.id").having("COUNT(DISTINCT songs_tags.tag_id) = ?", selected_tag_ids.size)
skip
Song.joins(:tags)
    .where(tags: { id: selected_tag_ids })
    .group("songs.id")
    .having("COUNT(DISTINCT tags.id) = ?", selected_tag_ids.size)
    .having("COUNT(DISTINCT songs_tags.tag_id) = ?", selected_tag_ids.size)
Song.joins(:tags)
    .where(tags: { id: selected_tag_ids })
    .group("songs.id")
    .having("COUNT(DISTINCT tags.id) = ?", selected_tag_ids.size)
songs = Song.joins(:tags)
             .where(tags: { id: selected_tag_ids })
             .group("songs.id")
             .having("COUNT(DISTINCT tags.id) = ?", selected_tag_ids.size)
             .select("songs.id")
songs = Song.joins(:tags).distinct
             .where(tags: { id: selected_tag_ids })
             .group("songs.id")
             .having("COUNT(DISTINCT tags.id) = ?", selected_tag_ids.size)
songs = Song.joins(:tags)
             .where(tags: { id: selected_tag_ids })
             .group("songs.id")
             .having("COUNT(DISTINCT tags.id) = ?", selected_tag_ids.size)
Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id").having("COUNT(*) = ?", selected_tag_ids.size)
Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id")
selected_tag_ids.size
selected_tag_ids.size)
Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id").having("COUNT(*) = ?", selected_tag_ids.size)
Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id").having("COUNT(*) = ?", selected_tag_ids.size).pluck(:id).size
skip
Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id").having("COUNT(*) = ?", selected_tag_ids.size).distinct
Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id").having("COUNT(*) = ?", selected_tag_ids.size)
Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id")
selected_tag_ids
Song.joins(:tags).where(tags: { id: selected_tag_ids })
skip
@song
selected_tag_ids.size == @song = Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id").having("COUNT(*) = ?", selected_tag_ids.size).order("RANDOM()").first
skip
selected_tag_ids
Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id").having("COUNT(*) = ?", selected_tag_ids.size).order(Arel.sql("COUNT(DISTINCT tags.id) ASC")).first
@song
skip
selected_tag_ids.size == Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id").having("COUNT(DISTINCT tags.id) = ?", selected_tag_ids.size), selected_tag_ids.size).order(Arel.sql("COUNT(*) ASC")).first
selected_tag_ids.size == Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id")..having("COUNT(DISTINCT tags.id) = ?", selected_tag_ids.size), selected_tag_ids.size).order(Arel.sql("COUNT(*) ASC")).first
skip
Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id").having("COUNT(*) = ?", selected_tag_ids.size)
a
aSong.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id").having("COUNT(*) = ?", selected_tag_ids.size)
a
Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id").having("COUNT(*) = ?", selected_tag_ids.size)
Song.joins(:tags).where(tags: { id: selected_tag_ids })
Song.joins(:tags)
 selected_tag_ids.size == Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id").having("COUNT(*) = ?", selected_tag_ids.size).order(Arel.sql("COUNT(*) ASC"))
selected_tag_ids.size == Song.joins(:tags).where(tags: { id: selected_tag_ids }).group("songs.id").having("COUNT(*) = ?", selected_tag_ids.size).order(Arel.sql("COUNT(*) ASC")).first
skip
selected_tag_ids.size == Song.joins(:song_tags).where(song_tags: { tag_id: selected_tag_ids }).group("songs.id").count.values.first
    elsif selected_tag_ids.size == Song.joins(:song_tags).where(song_tags: { tag_id: selected_tag_ids }).group("songs.id").count.values.first
selected_tag_ids
skip
selected_tag_ids
Song.joins(:song_tags).where(song_tags: { tag_id: selected_tag_ids }).distinct.count
selected_tag_ids.size
skip
selected_tag_ids
skip
sきp
